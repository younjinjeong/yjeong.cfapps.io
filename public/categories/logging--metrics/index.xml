<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Logging  Metrics on Pivotal Engineering Journal</title>
    <link>/categories/logging--metrics/</link>
    <description>Recent content in Logging  Metrics on Pivotal Engineering Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jan 2016 14:51:37 -0500</lastBuildDate>
    <atom:link href="/categories/logging--metrics/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Capturing Network Traffic With Docker Containers</title>
      <link>/post/network-traffic-monitoring-with-containers/</link>
      <pubDate>Fri, 29 Jan 2016 14:51:37 -0500</pubDate>
      
      <guid>/post/network-traffic-monitoring-with-containers/</guid>
      <description>

&lt;h2 id=&#34;software-and-promises:379f0b74b7a27238806c6913aaae4972&#34;&gt;Software and Promises&lt;/h2&gt;

&lt;p&gt;When software makes a promise, engineers need a way to verify that the promise is kept. In modern
software engineering, the process of “promise checking” is performed with a &lt;strong&gt;continuous integration&lt;/strong&gt; (CI) system.
Our CI system is &lt;a href=&#34;https://concourse.ci/&#34;&gt;Concourse&lt;/a&gt;:&lt;/p&gt;



  &lt;figure class=&#34;text-center visible-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/concourse.png&#34;  /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;A CI Pipeline in Concourse&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;
  &lt;figure class=&#34;hidden-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/concourse.png&#34;  class=&#34;img-responsive&#34; /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;A CI Pipeline in Concourse&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;




&lt;p&gt;Whenever a change is made to the code base, a series of automated tests attempt to ensure that the
software is working as planned.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&#34;https://pivotal.io/platform&#34;&gt;Pivotal Cloud Foundry&lt;/a&gt; (PCF), we guarantee that when software is deployed
on our platform, the software works in an &lt;strong&gt;air-gapped&lt;/strong&gt; environment (i.e., one that is either not connected
or not meant to connect to the internet). In these situations we want to maintain a “no-access”
policy with respect to the outside of a PCF deployment:&lt;/p&gt;



  &lt;figure class=&#34;text-center visible-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/firewall.png&#34;  /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;Non-Connected Networks&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;
  &lt;figure class=&#34;hidden-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/firewall.png&#34;  class=&#34;img-responsive&#34; /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;Non-Connected Networks&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;




&lt;p&gt;This is a common use case in enterprise deployments. When a network is air-gapped, we want to guarantee that &lt;strong&gt;no&lt;/strong&gt;
TCP/IP requests are directed to external networks. Even if the attempts fail due to firewalling or lack of
physical connection, making requests would almost certainly cause logging headaches for an
admin trying to maintain network integrity.&lt;/p&gt;

&lt;h2 id=&#34;testing-for-network-traffic:379f0b74b7a27238806c6913aaae4972&#34;&gt;Testing for Network Traffic&lt;/h2&gt;

&lt;p&gt;Testing this is not as trivial as it sounds. PCF is a multi-component deployment platform that
has a lot of moving parts:&lt;/p&gt;



  &lt;figure class=&#34;text-center visible-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/diego-architecture.png&#34;  /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;The Place of Buildpacks in Cloud Foundry&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;
  &lt;figure class=&#34;hidden-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/diego-architecture.png&#34;  class=&#34;img-responsive&#34; /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;The Place of Buildpacks in Cloud Foundry&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;




&lt;p&gt;As such, there is a lot of &amp;ldquo;safe&amp;rdquo; network traffic that is internal to PCF. To complicate matters,
applications are set up and scaled on Cloud Foundry using containers within virtual machines,
adding an additional layer of complexity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Buildpacks&lt;/strong&gt; (see figure) are what provide runtime support for apps deployed in PCF containers.
Cloud Foundry automatically detects the language and (if applicable)
framework of an app&amp;rsquo;s code. Buildpacks then combine the code with necessary compilers, interpreters, and other
dependencies.&lt;/p&gt;

&lt;p&gt;For example, if an application is written in Java using the &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; framework, the
&lt;a href=&#34;https://github.com/cloudfoundry/java-buildpack&#34;&gt;Java Buildpack&lt;/a&gt; installs a Java Virtual
Machine, Spring, and any other dependencies that are needed. It also configures the app to work with
any services that are bound to it, such as databases.&lt;/p&gt;

&lt;p&gt;So, how can we reliably test that our buildpacks, operating inside of Linux containers inside
virtual machines, which may or may not be running on top of cloud IaaS services, never have
external network traffic?&lt;/p&gt;

&lt;h2 id=&#34;iptables-and-you:379f0b74b7a27238806c6913aaae4972&#34;&gt;IPtables and You&lt;/h2&gt;

&lt;p&gt;Our original solution was to operate a miniature version of an entire Cloud Foundry deployment.
We configured custom &lt;code&gt;iptables&lt;/code&gt; rules in the virtual machine running Cloud Foundry. These iptables
rules determined which network packets were “safe” (or internal to the Cloud Foundry deployment)
and which were external. Unallowed packets were logged to a file using &lt;code&gt;rsyslog&lt;/code&gt;, and our tests
searched for lines of text in the log file.&lt;/p&gt;



  &lt;figure class=&#34;text-center visible-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/iptables.png&#34;  /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;Monitoring Network Traffic with iptables and rsyslog&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;
  &lt;figure class=&#34;hidden-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/iptables.png&#34;  class=&#34;img-responsive&#34; /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;Monitoring Network Traffic with iptables and rsyslog&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;




&lt;p&gt;The problem with this solution is that it was &lt;strong&gt;complex&lt;/strong&gt; and prone to &lt;strong&gt;unreliability&lt;/strong&gt;. There were
many breakage points because of the number of configuration steps. We also observed at
times some external packet traffic that was not reported. Our promise for an air-gapped
(or &lt;strong&gt;cached&lt;/strong&gt;) buildpack is that &lt;em&gt;zero&lt;/em&gt; network connections will be attempted. If we can’t
reliably monitor our network traffic, we can’t keep our promise.&lt;/p&gt;

&lt;h2 id=&#34;network-traffic-tests-in-docker:379f0b74b7a27238806c6913aaae4972&#34;&gt;Network Traffic Tests in Docker&lt;/h2&gt;

&lt;p&gt;Recently, we came across a simpler, more robust method for detecting network traffic
in our cached buildpacks. Enter Docker!&lt;/p&gt;



  &lt;figure class=&#34;text-center visible-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/docker.png&#34;  /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;Everyone&amp;#39;s Favorite Containerization Technology&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;
  &lt;figure class=&#34;hidden-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/docker.png&#34;  class=&#34;img-responsive&#34; /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;Everyone&amp;#39;s Favorite Containerization Technology&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;




&lt;p&gt;Docker is a wrapper around Linux &lt;strong&gt;containers&lt;/strong&gt;. Containers are userspaces that coexist
within a single kernel. Containers look and feel (mostly!) like their “own machines,”
but with a fraction of the resource cost needed to spin up entire virtual machines.&lt;/p&gt;

&lt;p&gt;At its core, Docker (and containerization) is about resource isolation. Containers share
the same storage, memory, and network as the host kernel, but are logically separated from one another:&lt;/p&gt;



  &lt;figure class=&#34;text-center visible-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/containers.png&#34;  /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;Containers in Linux&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;
  &lt;figure class=&#34;hidden-lg&#34;&gt;
      
          &lt;img src=&#34;/images/network-monitoring/containers.png&#34;  class=&#34;img-responsive&#34; /&gt;
      
      
      &lt;figcaption&gt;
          &lt;h4&gt;Containers in Linux&lt;/h4&gt;
          
      &lt;/figcaption&gt;
      
  &lt;/figure&gt;




&lt;p&gt;This logical separation is useful for spinning up virtual servers and deploying applications. Cloud Foundry
itself uses a containerization system called
&lt;a href=&#34;https://blog.pivotal.io/pivotal-cloud-foundry/features/cloud-foundry-container-technology-a-garden-overview&#34;&gt;Garden&lt;/a&gt;
to create containers that run deployed apps.&lt;/p&gt;

&lt;p&gt;So, Cloud Foundry deploys apps within containers using buildpacks, and we want to know if the buildpacks
are emitting network traffic. Instead of trying to log at the level of the physical or virtual machines,
why not execute a buildpack on a sample app inside a Docker container?&lt;/p&gt;

&lt;p&gt;There is a common Unix utility called &lt;code&gt;tcpdump&lt;/code&gt; that outputs a log of all packets transmitted
on a given machine. Could we just run tcpdump in the background to report on packets detected
in the container?&lt;/p&gt;

&lt;p&gt;The answer is a resounding yes! We have successfully replaced all network traffic tests in our CI
with a script that generates a Dockerfile on the fly, then executes a &lt;code&gt;docker build&lt;/code&gt; command to run
our buildpack inside a container alongside tcpdump. The file looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;FROM cloudfoundry/cflinuxfs2 # Cloud Foundry filesystem

ADD &amp;lt;application path&amp;gt; /app
ADD &amp;lt;buildpack path&amp;gt; /buildpack

RUN (sudo tcpdump -n -i eth0 not udp port 53 and ip -c 1 -t | sed -e &#39;s/^[^$]/internet traffic: /&#39; 2&amp;gt;&amp;amp;1 &amp;amp;) \
&amp;amp;&amp;amp; &amp;lt;buildpack execution commands&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, if you run &lt;code&gt;docker build .&lt;/code&gt; with the Dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;FROM cloudfoundry/cflinuxfs2

RUN (sudo tcpdump -n -i eth0 not udp port 53 and ip -c 1 -t | sed -e &#39;s/^[^$]/internet traffic: /&#39; 2&amp;gt;&amp;amp;1 &amp;amp;) \
&amp;amp;&amp;amp; curl https://www.google.com/ \
&amp;amp;&amp;amp; sleep 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sending build context to Docker daemon 970 kB
. . .
1 packet captured
. . .
internet traffic: P 173.194.121.49.443 &amp;gt; 172.17.4.44.38888 . . .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there it is! Our original solution was a complex &lt;code&gt;iptables&lt;/code&gt; configuration and syslogging on a virtual machine running PCF.
In our new solution, we reduced this to a &lt;em&gt;single Docker build command&lt;/em&gt;. This operation is entirely modular and reproducible
on any environment, not just a PCF deployment.&lt;/p&gt;

&lt;p&gt;In software engineering, we attempt to &lt;strong&gt;minimize the complexity&lt;/strong&gt; of solutions. Simpler solutions are (usually!) more robust,
and there is also a huge cost in understanding and debugging complex systems. Here we took what was originally a
complex approach to network traffic monitoring, and instead used containerization with Docker to make that monitoring
more simple and robust. If you’d like to examine the solution in detail, feel free to check out the
&lt;a href=&#34;https://github.com/cloudfoundry/machete/blob/master/lib/machete/matchers/app_has_internet_traffic.rb&#34;&gt;full implementation&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using the Cloud Foundry Firehose Plugin</title>
      <link>/post/Firehose-Plugin/</link>
      <pubDate>Tue, 20 Oct 2015 20:54:48 -0600</pubDate>
      
      <guid>/post/Firehose-Plugin/</guid>
      <description>

&lt;h2 id=&#34;firehose-at-your-fingertips:e6d881032b6de5db24c59b1920a4ff8d&#34;&gt;Firehose at your fingertips&lt;/h2&gt;

&lt;p&gt;On the Logging and Metrics team, we recently found ourselves in a need to debug the CF Firehose more easily and we wanted to share that tool with all CF operators out there. In case you don&amp;rsquo;t know what the Firehose is, let me tell you: It is undoubtedly the most powerful feature added to the CF logging system in the last 2 years. That&amp;rsquo;s why its typically also restricted to be used by just the admin users. You know the saying &amp;lsquo;With great power comes great bragging rights&amp;rdquo; (or something like that).&lt;/p&gt;

&lt;h3 id=&#34;what-is-the-firehose:e6d881032b6de5db24c59b1920a4ff8d&#34;&gt;What is the firehose?&lt;/h3&gt;

&lt;p&gt;In all seriousness, the Firehose can be very useful. It is a stream of all application logs and all component metrics from the CF components. Unfortunately, so far it has been really difficult to access (you had to write some code in go to get access to that stream). But with our brand new Firehose CLI plugin, all you have to do is install the plugin from the plugin repository and you are good to go.&lt;/p&gt;



  &lt;figure class=&#34;center visible-lg&#34;&gt;
      
          &lt;img src=&#34;/images/loggregator/diagram.gif&#34;  /&gt;
      
      
  &lt;/figure&gt;
  &lt;figure class=&#34;hidden-lg&#34;&gt;
      
          &lt;img src=&#34;/images/loggregator/diagram.gif&#34;  class=&#34;img-responsive&#34; /&gt;
      
      
  &lt;/figure&gt;




&lt;h3 id=&#34;how-can-i-obtain-admin-access:e6d881032b6de5db24c59b1920a4ff8d&#34;&gt;How can I obtain admin access?&lt;/h3&gt;

&lt;p&gt;As mentioned earlier, you need either admin access or some special permission to access the Firehose. Fortunately, the Loggregator &lt;a href=&#34;https://github.com/cloudfoundry/loggregator/#configuring-the-firehose&#34;&gt;README&lt;/a&gt; provides good details on how to set this up.&lt;/p&gt;

&lt;h3 id=&#34;how-do-i-install-the-plugin:e6d881032b6de5db24c59b1920a4ff8d&#34;&gt;How do I install the plugin?&lt;/h3&gt;

&lt;p&gt;Installing, the plugin is really simple.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Login to the CF CLI with your admin creds&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf api &amp;lt;your_cf_api_url&amp;gt;
cf login
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the plugin repository&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf add-plugin-repo CF-Community http://plugins.cloudfoundry.org/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the plugin&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf install-plugin &amp;quot;Firehose Plugin&amp;quot; -r CF-Community
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;how-do-i-use-the-firehose-plugin:e6d881032b6de5db24c59b1920a4ff8d&#34;&gt;How do I use the Firehose plugin?&lt;/h3&gt;

&lt;p&gt;There are two ways of using the plugin. There is an interactive mode and non-interactive mode.&lt;/p&gt;

&lt;p&gt;The interactive mode requires some user input and will look something like below. You may select the type of messages you&amp;rsquo;d like to have streaming on your terminal by selecting an index. If you are curious as to why it doesn&amp;rsquo;t start with 1, look &lt;a href=&#34;https://github.com/cloudfoundry/dropsonde-protocol/blob/master/events/envelope.proto#L13&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/cloudfoundry/firehose-plugin/blob/master/firehose/client.go#L85&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-no-language&#34;&gt;$ cf nozzle
What type of firehose messages do you want to see?
Please enter one of the following choices:
    hit &#39;enter&#39; for all messages
    2 for HttpStart
    3 for HttpStop
    4 for HttpStartStop
    5 for LogMessage
    6 for ValueMetric
    7 for CounterEvent
    8 for Error
    9 for ContainerMetric
  &amp;gt; 5
Starting the nozzle
Hit Ctrl+c to exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the &lt;code&gt;--filter&lt;/code&gt; flag to have the plugin operate without user interaction. For example, if you want to filter the log stream to contain just counter events then you can run the command like this &lt;code&gt;cf nozzle --filter CounterEvent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want all logs and not automatically enter interactive mode, you can pass in the &lt;code&gt;--no-filter&lt;/code&gt; flag. This is the same as hitting enter in the interactive mode.&lt;/p&gt;

&lt;h3 id=&#34;share-the-load:e6d881032b6de5db24c59b1920a4ff8d&#34;&gt;Share the load&lt;/h3&gt;

&lt;p&gt;So the Firehose has this nifty feature where the logs can be distributed across various sessions in order to reduce load. All you need to do is use the same subscription ID for each session. So what that means is, if you have two terminal windows open and you run the following command &lt;code&gt;cf nozzle --no-filter --subscription-id zaphod&lt;/code&gt; the load would be split evenly among the two sessions. Although having two heads didn&amp;rsquo;t seem to help Zaphod anyways.&lt;/p&gt;

&lt;h3 id=&#34;don-t-panic:e6d881032b6de5db24c59b1920a4ff8d&#34;&gt;Don&amp;rsquo;t Panic&lt;/h3&gt;

&lt;p&gt;In case you get any errors, just hold on to your towel.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Error&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unauthorized error: You are not authorized. Error: Invalid authorization&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Just regenerate your auth-token like so: &lt;code&gt;cf oauth-token&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unable to recognize filter HtttpStarrrt&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Check your spelling&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Invalid filter choice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Check your index choice. Enter a number from 2 through 9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;how-we-use-this-plugin:e6d881032b6de5db24c59b1920a4ff8d&#34;&gt;How we use this plugin?&lt;/h3&gt;

&lt;p&gt;We use &lt;code&gt;cf nozzle -n&lt;/code&gt; primarily for debugging and acceptance purposes. It&amp;rsquo;s a quick way to look for expected component and application logs. Recently, our PM used this tool to look for logs originating from the DEA after pushing an app to PCF. Before this tool, he would have had to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup his GOPATH and &lt;code&gt;go get&lt;/code&gt; the &lt;a href=&#34;https://github.com/cloudfoundry/noaa&#34;&gt;NOAA&lt;/a&gt; library.&lt;/li&gt;
&lt;li&gt;Set up the environment variables CF_ACCESS_TOKEN and DOPPLER_ADDR.&lt;/li&gt;
&lt;li&gt;Follow instructions to build and run the firehose sample.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>