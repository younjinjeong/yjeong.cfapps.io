<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cf Runtime on Pivotal Engineering Journal</title>
    <link>/categories/cf-runtime/</link>
    <description>Recent content in Cf Runtime on Pivotal Engineering Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Mar 2016 17:00:00 -0400</lastBuildDate>
    <atom:link href="/categories/cf-runtime/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Making A Useful C&#43;&#43; Buildpack</title>
      <link>/post/making-a-useful-c&#43;&#43;-buildpack/</link>
      <pubDate>Sun, 20 Mar 2016 17:00:00 -0400</pubDate>
      
      <guid>/post/making-a-useful-c&#43;&#43;-buildpack/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;running &lt;code&gt;make&lt;/code&gt; is easy,&lt;/li&gt;
&lt;li&gt;but you need &lt;strong&gt;header files&lt;/strong&gt; to compile against,&lt;/li&gt;
&lt;li&gt;and you need &lt;strong&gt;libraries&lt;/strong&gt; to link against,&lt;/li&gt;
&lt;li&gt;and you probably want to &lt;strong&gt;configure&lt;/strong&gt; your framework.&lt;/li&gt;
&lt;li&gt;hey! I&amp;rsquo;ve released &lt;a href=&#34;https://github.com/cloudfoundry-community/cppcms-buildpack&#34;&gt;cloudfoundry-community/cppcms-buildpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-simple-c-c-buildpack-is-easy:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;A Simple C/C++ Buildpack is Easy&lt;/h2&gt;

&lt;p&gt;If you want to run &lt;code&gt;make&lt;/code&gt; during staging, that&amp;rsquo;s pretty easy. Heroku
has a minimal buildpack,
&lt;a href=&#34;https://github.com/heroku/heroku-buildpack-c&#34;&gt;heroku-buildpack-c&lt;/a&gt;,
that will simply run &lt;code&gt;configure&lt;/code&gt; (if you&amp;rsquo;ve got a &lt;code&gt;configure&lt;/code&gt; file)
and &lt;code&gt;make&lt;/code&gt;. And it totally works on Cloud Foundry, you can go try it!&lt;/p&gt;

&lt;h2 id=&#34;oh-wait:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;Oh, wait.&lt;/h2&gt;

&lt;p&gt;You won&amp;rsquo;t go try it out. I know you won&amp;rsquo;t, because it&amp;rsquo;s a terrible
idea.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s totally impractical to write a web service in C++ without using
some sort of framework that would require header files and libraries
that aren&amp;rsquo;t present in the rootfs.&lt;/p&gt;

&lt;p&gt;How impractical? Here&amp;rsquo;s a simple &amp;ldquo;Hello, world!&amp;rdquo; program that I found
by clicking on the first Google result that matched &amp;ldquo;c web server&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fekberg/GoHttp&#34;&gt;https://github.com/fekberg/GoHttp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you
&lt;a href=&#34;https://github.com/fekberg/GoHttp/blob/master/GoHttp.c&#34;&gt;look at the code&lt;/a&gt;,
you&amp;rsquo;ll see there&amp;rsquo;s 500+ lines of C code that are simply handling GET
and HEAD requests for various mime types.&lt;/p&gt;

&lt;p&gt;That seems pretty amazing; I actually expected it to be much bigger
and more complicated. Regardless, I would never, ever want to do that
myself, for a huge variety of reasons, primarily security, but also to
preserve my sanity and to make sure I was focusing on the
&lt;a href=&#34;http://engineering.pivotal.io/post/abstraction-or-the-gift-of-our-weak-brains/&#34;&gt;right abstractions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The hypothesis for the rest of this post it that &lt;strong&gt;any robust web app
is going to be using a framework&lt;/strong&gt;, which will bring along its own
header files and libraries. And thus a buildpack that simply runs
&lt;code&gt;make&lt;/code&gt; is not very useful.&lt;/p&gt;

&lt;h2 id=&#34;a-real-world-example:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;A Real-World Example&lt;/h2&gt;

&lt;p&gt;I was chatting with a business partner a few weeks ago about his
firm&amp;rsquo;s need for a C++ buildpack. I&amp;rsquo;ll call him &amp;ldquo;Bob.&amp;rdquo; I brought up the
challenges of making sure header files and libraries are available
during staging.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Wouldn&amp;rsquo;t it be easier to pre-compile the binary on a development
system where all these files are available, and then deploy using the
&lt;a href=&#34;https://github.com/cloudfoundry/binary-buildpack&#34;&gt;binary-buildpack&lt;/a&gt;?&amp;rdquo;
I asked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;ldquo;No, I want to preserve the simplicity of &lt;code&gt;cf push&lt;/code&gt; for our C++
developers,&amp;rdquo;&lt;/strong&gt; Bob responded. &amp;ldquo;It&amp;rsquo;s a great model, and there&amp;rsquo;s no good reason it shouldn&amp;rsquo;t work for our C++ microservice authors.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This absolutely blew my mind, as it turned on its head my mental model
of a C++ developer.&lt;/p&gt;

&lt;p&gt;For many years I worked with productive C and C++ developers who all
preferred &amp;ldquo;manual transmission&amp;rdquo; tooling, to preserve developer
discretion and optimization in how code was built and deployed.&lt;/p&gt;

&lt;p&gt;Now Bob, an internet-famous technology executive, was telling me that
he&amp;rsquo;d prefer &amp;ldquo;automatic transmission&amp;rdquo;, as popularly described by
&lt;a href=&#34;https://twitter.com/onsijoe/status/598235841635360768&#34;&gt;Onsi&amp;rsquo;s CF Haiku&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;here is my source code
&lt;br&gt;run it on the cloud for me
&lt;br&gt;i do not care how&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;ORLY!&lt;/strong&gt; Challenge accepted.&lt;/p&gt;

&lt;h2 id=&#34;cppcms:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;CppCMS&lt;/h2&gt;

&lt;p&gt;Bob mentioned &lt;a href=&#34;http://cppcms.com/&#34;&gt;CppCMS&lt;/a&gt; as a potential C++ web
framework for microservice authors. I had never heard of it before,
and so step one was to get familiar with it, and deploy a &amp;ldquo;Hello,
World!&amp;rdquo; app.&lt;/p&gt;

&lt;p&gt;The CppCMS site provides a &amp;ldquo;Hello, World!&amp;rdquo; app, and the code is pretty
tight (at least, compared to the
&lt;a href=&#34;https://github.com/fekberg/GoHttp/blob/master/GoHttp.c&#34;&gt;GoHTTP&lt;/a&gt;
implementation):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;cppcms/application.h&amp;gt;
#include &amp;lt;cppcms/applications_pool.h&amp;gt;
#include &amp;lt;cppcms/service.h&amp;gt;
#include &amp;lt;cppcms/http_response.h&amp;gt;
#include &amp;lt;iostream&amp;gt;

class hello : public cppcms::application {
public:
  hello(cppcms::service &amp;amp;srv) :
    cppcms::application(srv) {}
  virtual void main(std::string url);
};

void hello::main(std::string /*url*/)
{
  response().out() &amp;lt;&amp;lt;
    &amp;quot;&amp;lt;html&amp;gt;\n&amp;quot;
    &amp;quot;&amp;lt;body&amp;gt;\n&amp;quot;
    &amp;quot;  &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;\n&amp;quot;
    &amp;quot;&amp;lt;/body&amp;gt;\n&amp;quot;
    &amp;quot;&amp;lt;/html&amp;gt;\n&amp;quot;;
}

int main(int argc,char ** argv)
{
  try {
    cppcms::service srv(argc,argv);
    srv.applications_pool().
      mount(cppcms::applications_factory&amp;lt;hello&amp;gt;());
    srv.run();
  } catch(std::exception const &amp;amp;e) {
    std::cerr &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The obvious challenge, however, being the compile-time requirement of
&lt;code&gt;cppcms&lt;/code&gt; header files and the runtime requirement on both
&lt;code&gt;libcppcms.so&lt;/code&gt; and &lt;code&gt;libbooster.so&lt;/code&gt; shared object libraries.&lt;/p&gt;

&lt;h2 id=&#34;let-s-adopt-some-conventions:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;Let&amp;rsquo;s Adopt Some Conventions&lt;/h2&gt;

&lt;p&gt;We can very easily reproduce some of
&lt;a href=&#34;https://github.com/heroku/heroku-buildpack-c&#34;&gt;heroku-buildpack-c&lt;/a&gt;&amp;rsquo;s
behavior, and demand that application authors provide a &lt;code&gt;Makefile&lt;/code&gt; to
compile the application.&lt;/p&gt;

&lt;p&gt;We might imagine a simple &lt;code&gt;Makefile&lt;/code&gt; that assumes the existence of a &lt;code&gt;cppcms&lt;/code&gt; directory containing header files and libraries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;hello: hello.cpp
  c++ hello.cpp -o hello \
    -Lcppcms/lib -Icppcms/include \
    -lcppcms -lbooster -lz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But CppCMS also requires a
&lt;a href=&#34;http://cppcms.com/wikipp/en/page/cppcms_1x_config&#34;&gt;JSON configuration file&lt;/a&gt;
at runtime. Let&amp;rsquo;s ask configuration authors to name this file as
&lt;code&gt;cppcms.js&lt;/code&gt;, so we can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;know whether this is a CppCMS application (i.e., at &lt;code&gt;bin/detect&lt;/code&gt; time)&lt;/li&gt;
&lt;li&gt;inject configuration parameters into an application at runtime (e.g., &lt;code&gt;PORT&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For context, here&amp;rsquo;s what a typical development configuration looks like for CppCMS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;service&amp;quot; : {
    &amp;quot;api&amp;quot; : &amp;quot;http&amp;quot;,
    &amp;quot;port&amp;quot; : 8888
  },
  &amp;quot;logging&amp;quot; : {
    &amp;quot;level&amp;quot; : &amp;quot;debug&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At detection time, let&amp;rsquo;s look for &lt;code&gt;cppcms.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# bin/detect
if [[ -f &amp;quot;$1/cppcms.js&amp;quot; ]] ; then
  echo &amp;quot;cppcms&amp;quot;
  exit 0
else
  echo &amp;quot;no&amp;quot;
  exit 1
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And at runtime, let&amp;rsquo;s use &lt;code&gt;jq&lt;/code&gt; to inject &lt;code&gt;IP&lt;/code&gt; and &lt;code&gt;PORT&lt;/code&gt;, and to make sure
the HTTP interface is active:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp cppcms.js cppcms.js.template
cat cppcms.js.template | \
  jq &amp;quot;.service.port=${PORT}|.service.ip=\&amp;quot;0.0.0.0\&amp;quot;|.service.api=\&amp;quot;http\&amp;quot;&amp;quot; | \
  tee cppcms.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;but-what-about-the-headers-and-libraries:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;But What About the Headers and Libraries?&lt;/h2&gt;

&lt;p&gt;Making header files available at staging time seems pretty easy;
they&amp;rsquo;re just text files, and can be simply copied from a CppCMS
distribution.&lt;/p&gt;

&lt;p&gt;But shared-object libraries are harder. They need to be cross-compiled
for the rootfs. How can we make sure this happens safely?&lt;/p&gt;

&lt;p&gt;Good news. The CF Buildpacks team has, over the last year,
open-sourced all the tooling that they use to generate binaries for
most of the Official Cloud Foundry™ buildpacks (binary, go, node, php,
python, ruby, and staticfile). One of these tools is
&lt;a href=&#34;https://github.com/cloudfoundry/binary-builder&#34;&gt;binary-builder&lt;/a&gt;,
which cross-compiles binaries for the CF container rootfs.&lt;/p&gt;

&lt;p&gt;I wrote a new &amp;ldquo;recipe&amp;rdquo; for CppCMS, which is on an
&lt;a href=&#34;https://github.com/cloudfoundry/binary-builder/tree/flavorjones-cppcms&#34;&gt;experimental branch&lt;/a&gt;,
that downloads and verifies a checksum for a source tarball, then
configures and compiles it for the CF rootfs. It contains the header
files and the libraries (both static and shared), and so contains
everything we need to stage and run a CppCMS application.&lt;/p&gt;

&lt;h2 id=&#34;putting-it-all-together:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;Putting It All Together&lt;/h2&gt;

&lt;p&gt;(The final version of the buildpack is at
&lt;a href=&#34;https://github.com/cloudfoundry-community/cppcms-buildpack&#34;&gt;cloudfoundry/cppcms-buildpack&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The pieces we need to assemble:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the tarball containing the headers files and libraries&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;bin/detect&lt;/code&gt; script&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;bin/compile&lt;/code&gt; script&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;bin/release&lt;/code&gt; script&lt;/li&gt;
&lt;li&gt;a script to configure the application at runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;the-cppcms-tarball:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;The CppCMS Tarball&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;binary-builder&lt;/code&gt; job from the
&lt;a href=&#34;https://github.com/cloudfoundry/binary-builder/tree/flavorjones-cppcms&#34;&gt;experimental branch&lt;/a&gt;
creates a file, &lt;code&gt;cppcms-1.0.5-linux-x64.tgz&lt;/code&gt;, containing header files
and both static and shared libraries.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll add this tarball to the buildpack as an archive which can be
used if and when the buildpack is used to compile an application; and
we&amp;rsquo;ll make sure it&amp;rsquo;s easily identifiable as having been cross-compiled
for
&lt;a href=&#34;https://github.com/cloudfoundry/stacks/tree/master/cflinuxfs2&#34;&gt;&lt;code&gt;cflinuxfs2&lt;/code&gt;&lt;/a&gt;
(as opposed to another stack).&lt;/p&gt;

&lt;h3 id=&#34;bin-detect:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;&lt;code&gt;bin/detect&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Shown above; let&amp;rsquo;s just look for the &lt;code&gt;cppcms.js&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re specifying your buildpack at &lt;code&gt;cf push&lt;/code&gt; time (with the &lt;code&gt;-b&lt;/code&gt;
parameter), this script won&amp;rsquo;t even run, so it&amp;rsquo;s not strictly necessary
unless you&amp;rsquo;ve added it to the admin buildpacks on your CF deployment.&lt;/p&gt;

&lt;h3 id=&#34;bin-compile:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;&lt;code&gt;bin/compile&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The workhorse of application staging, &lt;code&gt;bin/compile&lt;/code&gt; must generate a
droplet that&amp;rsquo;s deployable, and so has to do a few different things.&lt;/p&gt;

&lt;p&gt;First, we&amp;rsquo;ll untar the appropriate version of CppCMS for your stack into the application&amp;rsquo;s directory (so it&amp;rsquo;s in the eventual droplet):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CPPCMS_VERSION=1.0.5
TARBALL=&amp;quot;${BUILDPACKS_DIR}/vendor/${CF_STACK}/cppcms-${CPPCMS_VERSION}-linux-x64.tgz&amp;quot;
if [[ ! -f $TARBALL ]] ; then
  ls ${BUILDPACKS_DIR}/vendor/${CF_STACK}
  error &amp;quot;could not find a cppcms libary for the &#39;${CF_STACK}&#39; stack.&amp;quot;
fi
mkdir -p cppcms
tar -m --directory cppcms -zxf $TARBALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we make &lt;code&gt;CF_STACK&lt;/code&gt; a first-class variable. If you&amp;rsquo;ve got
multiple stacks, you&amp;rsquo;ll need to cross-compile CppCMS for each of them.&lt;/p&gt;

&lt;p&gt;Then, we&amp;rsquo;ll make sure it runs &lt;code&gt;configure&lt;/code&gt; if you have an
autoconf-enabled application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [[ -f configure ]] ; then
  ./configure
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we&amp;rsquo;ll run &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we&amp;rsquo;ll set up a script to run at application startup to allow
us to inject runtime configuration (see next subsection).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ${BUILD_DIR}/.profile.d
cp ${BUILDPACKS_DIR}/bin/cppcms.sh ${BUILD_DIR}/.profile.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The final version of this script is viewable
&lt;a href=&#34;https://github.com/cloudfoundry-community/cppcms-buildpack/blob/master/bin/compile&#34;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;h3 id=&#34;configuring-the-application-at-runtime:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;Configuring the Application at Runtime&lt;/h3&gt;

&lt;p&gt;Finally, we need to make sure that the application is configured
properly to run as a CF application. Primarily, this means listening
on the appropriate port, but also listening on the correct network
interface and making sure that HTTP is turned on (as opposed to
&lt;a href=&#34;http://cppcms.com/wikipp/en/page/cppcms_1x_tut_web_server_config&#34;&gt;FastCGI or some other craziness&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I showed above how we could do this using &lt;code&gt;jq&lt;/code&gt;, which has been in the
rootfs since
&lt;a href=&#34;https://github.com/cloudfoundry/stacks/releases/tag/1.2.0&#34;&gt;v1.2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other thing we&amp;rsquo;ll need to do is to set the linker&amp;rsquo;s path to be
able to find the libraries at runtime:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:cppcms/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following the existing
&lt;a href=&#34;https://docs.cloudfoundry.org/devguide/deploy-apps/deploy-app.html#profiled&#34;&gt;buildpack convention&lt;/a&gt;,
we&amp;rsquo;ll name this script after the buildpack, &lt;code&gt;cppcms.sh&lt;/code&gt;, and put it
into the droplet&amp;rsquo;s &lt;code&gt;.profile.d&lt;/code&gt; directory (see above for where this is
done in the &lt;code&gt;bin/compile&lt;/code&gt; script).&lt;/p&gt;

&lt;h2 id=&#34;wrap-it-up-already:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;Wrap It Up, Already.&lt;/h2&gt;

&lt;p&gt;Ok, ok. I&amp;rsquo;ve provided a &amp;ldquo;Hello, World!&amp;rdquo; application &lt;a href=&#34;https://github.com/cloudfoundry-community/cppcms-buildpack/tree/master/test/fixtures/hello-world&#34;&gt;within the
buildpack&amp;rsquo;s repo&lt;/a&gt; that you can push with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf push my-app-name -b https://github.com/cloudfoundry-community/cppcms-buildpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s what I see:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cf push flavorjones-cppcms -b https://github.com/cloudfoundry-community/cppcms-buildpack
Creating app flavorjones-cppcms in org flavorjones / space buildpack-acceptance as mdalessio@pivotal.io...
OK

Using route flavorjones-cppcms.cfapps.io
Binding flavorjones-cppcms.cfapps.io to flavorjones-cppcms...
OK

Uploading flavorjones-cppcms...
Uploading app files from: /home/flavorjones/code/cf/Buildpacks/cppcms-buildpack/test/fixtures/hello-world
Uploading 1.9K, 3 files
Done uploading
OK

Starting app flavorjones-cppcms in org flavorjones / space buildpack-acceptance as mdalessio@pivotal.io...
Creating container
Successfully created container
Downloading app package...
Downloaded app package (1.2K)
Staging...
-----&amp;gt; compiling with make ...
       c++ hello.cpp -o hello -Lcppcms/lib -Icppcms/include -lcppcms -lbooster -lz
-----&amp;gt; setting up .profile.d ...
Exit status 0
Staging complete
Uploading droplet, build artifacts cache...
Uploading droplet...
Uploading build artifacts cache...
Uploaded build artifacts cache (108B)
Uploaded droplet (24.6M)
Uploading complete

1 of 1 instances running

App started


OK

App flavorjones-cppcms was started using this command `make run`

Showing health and status for app flavorjones-cppcms in org flavorjones / space buildpack-acceptance as mdalessio@pivotal.io...
OK

requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: flavorjones-cppcms.cfapps.io
last uploaded: Sun Mar 20 20:12:50 UTC 2016
stack: unknown
buildpack: https://github.com/cloudfoundry-community/cppcms-buildpack

     state     since                    cpu    memory    disk      details
#0   running   2016-03-20 04:13:13 PM   0.0%   0 of 1G   0 of 1G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ curl flavorjones-cppcms.cfapps.io
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Heavenly!&lt;/p&gt;

&lt;h2 id=&#34;what-s-next:b858bc1485f7780a5d75be489e3e26f5&#34;&gt;What&amp;rsquo;s Next?&lt;/h2&gt;



  &lt;figure class=&#34;right small visible-lg&#34;&gt;
      
          &lt;img src=&#34;/images/making-a-useful-c&amp;#43;&amp;#43;-buildpack/bjarne.jpg&#34;  /&gt;
      
      
  &lt;/figure&gt;
  &lt;figure class=&#34;hidden-lg&#34;&gt;
      
          &lt;img src=&#34;/images/making-a-useful-c&amp;#43;&amp;#43;-buildpack/bjarne.jpg&#34;  class=&#34;img-responsive&#34; /&gt;
      
      
  &lt;/figure&gt;




&lt;p&gt;I&amp;rsquo;d love to hear what people think of this approach. Currently this buildpack implements shared-linking, and not static-linking, because of what I read on &lt;a href=&#34;http://cppcms.com/wikipp/en/page/ref_embedded#Static.Linking&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d also love to hear your thoughts on whether there are better ways
to configure the app at startup time.&lt;/p&gt;

&lt;p&gt;Go Forth and Prosper with C++!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring at Pivotal</title>
      <link>/post/exploring-at-pivotal/</link>
      <pubDate>Mon, 15 Feb 2016 20:18:28 -0400</pubDate>
      
      <guid>/post/exploring-at-pivotal/</guid>
      <description>

&lt;h1 id=&#34;the-problem:53d3e320697847aea016713255ef9986&#34;&gt;The problem&lt;/h1&gt;

&lt;p&gt;As Agile methodologies sweep modern software development teams, a question begins to be uttered by more and more adopters:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;What do we do with our QAs?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some want their QAs but demand that they complete their work in much less time - sometimes in as little as a couple hours. Many opt to remove the group from their process altogether. And some groups introduce the practice of Test-Driven-Development to, more or less, replace the work of Quality Assurance Engineers. In Agile, the faster and more continously one can ship code, the better. And there&amp;rsquo;s something crippling about having your hot code being left to get cold at the inspection of a quality gatekeeper. I admit, I&amp;rsquo;ve never did see the appeal or benefits of Agile until I joined Pivotal. The productivity, efficiency, and consistency at which software development happens is something that I do not think that I will witness elsewhere. However, Pivotal is Agile to the bone and that means that iterations are tight, code is rarely written by yourself, and much of the testing is automated.&lt;/p&gt;

&lt;p&gt;Pivotal strives to assure the highest level of quality with anything that we ship, especially with the &lt;a href=&#34;http://pivotal.io/platform&#34;&gt;Pivotal Cloud Foundry&lt;/a&gt; project. The project has hundreds of developers on it at a time. The kind of bugs that manifest aren&amp;rsquo;t the typical kind that a unit test will catch. It&amp;rsquo;s things like that some members your distributed system were fighting over the last slice of&amp;hellip; allocated memory and now they refuse talk to each other. It&amp;rsquo;s the kind of bugs that you cannot anticipate and thus might overlook the automated test for it. In short, the kind of things that you would expect your QA team to report.&lt;/p&gt;

&lt;p&gt;Something that has worked well for a lot of other agile groups is to have a tester on every team that tests in tandem with the developers working. Although that has had some success, we want to avoid having that kind of format here. There&amp;rsquo;s something alarming about having a member of your team having a specialized skillset or domain of knowledge. If this one member is out sick or leaves and takes all his/her abilities with them then the team is at a disadvantage. Moreover, this can be a disparaging position to many. In a way, your role is validated by having another group waiting on your work. For instance, your designer deemed necessary by the front-end engineers looking for a mock-up to implement. Comparably, your PM is deemed necessary by the engineers looking for stories to implement and acccept. If you have a tester on the team that gets to test code that is continually deployed regardless of his/her say-so, it can be demoralizing - for some.&lt;/p&gt;

&lt;h1 id=&#34;the-solution:53d3e320697847aea016713255ef9986&#34;&gt;The solution&lt;/h1&gt;

&lt;p&gt;We try to close the gap with the concept of exploratory charter stories. The idea is that we have investigation stories catered towards testing sprinkled through the backlog that &lt;em&gt;any&lt;/em&gt; member of the team can pick up. In doing the story, you&amp;rsquo;d be engaging in the practice of unscripted testing and be using a workflow similar to that of QA doing some exploratory testing themselves. In general they look like this.&lt;/p&gt;


&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;/images/sample-charter.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Anyone who has done charter based exploratory testing will feel right at home with these. The typical use case is a team might create a charter story after a track of work that needs extra validation before a release or turning on a feature flag. The power of this approach comes in knowing how to use it effectively with your overall testing strategy. On the one hand, you &lt;em&gt;must&lt;/em&gt; have your developers covering your bases with automated regression tests written while the code is written. Then you have your product manager checking for lapses in the usability or business facing requirements while performing acceptance tests on delivered work. Exploratory testing offers the chance to catch the relevant edge cases that might slip through the other stages of your testing in a way that only human &lt;strong&gt;intuition&lt;/strong&gt; can. More importantly, it gives you the chance to learn about how product behaves. In general, these can work out quite well - if you know how to use it.&lt;/p&gt;

&lt;h2 id=&#34;the-problem-with-the-solution:53d3e320697847aea016713255ef9986&#34;&gt;The problem with the solution&lt;/h2&gt;

&lt;p&gt;The most prominent problem is knowing when you should write a charter. It is a non-trivial issue that I do not think gets experienced elsewhere. We want to restrict the charters for high-risk areas of your application, but saying you can know that before the fact also implies that you can know where bugs will lie before they happen. We try to provide that &lt;strong&gt;intuition&lt;/strong&gt; by having &lt;strong&gt;explorers&lt;/strong&gt; who frequently rotate among teams that have a strong sense of where bugs normally lie and can, by pairing, transfer this. Still, intuition is a very slippery notion and not something that one can easily ascertain as being transferred. Furthermore, bugs aren&amp;rsquo;t simply in the high-risk places but also in the areas of low-risk or places you would not expect them to be. Although we purposefully want to restrict exploration, so that developer time is not encumberred, we risk missing the test coverage that we could be getting.&lt;/p&gt;

&lt;p&gt;A more unsettling problem is not understanding how learning is important to the process and how it relates to testing, especially among developers. A common theme is that having to derail usual feature work, and sacrificing velocity, to go spelunking on the feature that you might have delivered days ago seems like a step backwards. One might wonder how chartered explorations differ from the usual delivery process or even the process of reading documentation while working on a story. The issue is that these individuals are purely looking for bugs, as a return on investment, for the time spent not writing code. Exploratory testing is about much more than just that.&lt;/p&gt;

&lt;p&gt;Although I, myself, am an &lt;strong&gt;explorer&lt;/strong&gt; here at Pivotal, I also build iOS apps in my spare time - with some deployed to the App Store. My testing for my apps are purely exploratory. Every code change, every styling change, anything change I do, I re-enact the entire user flow to get the relevant view and inspect it. It&amp;rsquo;s the equivalent of performing your regression suite manually, but it is still exploratory in nature in that it still leaves room for unscripted testing based on what I might notice. It might seem incredibly slow and tedious but I prefer it that way. In fact I believe it to be the ideal form of testing. What people are missing is that exploratory testing isn&amp;rsquo;t simply about finding bugs, it is about becoming &lt;em&gt;intimate&lt;/em&gt; with your application. I want to know every time it sneezes and not through some analytics software but with my own eyes. And when you get to that point of trying your login screen for the thousandth time, finding bugs or thinking up edges cases to explore is trivial. I&amp;rsquo;d argue that the best explorers are motivated simply by the desire to &lt;del&gt;learn&lt;/del&gt; experience every single thing about how their software behaves and by nothing else.&lt;/p&gt;

&lt;h2 id=&#34;the-truth:53d3e320697847aea016713255ef9986&#34;&gt;The Truth&lt;/h2&gt;

&lt;p&gt;Of course, not everyone is wired like that. Many developers are motivated by the tangible. Code, features, points are tangible units of work. They&amp;rsquo;re things that can be shown off or argued about. Your initimacy with a project is something akin to inner beauty. Furthermore it is a lot easier to be more passionate about the application that you built from the ground up than a project that you&amp;rsquo;ve just been rolled on to. &lt;em&gt;But&lt;/em&gt; it does not matter. If there&amp;rsquo;s anything true in this world, it is this: Whoever knows the most, finds the most bugs, period. You just recognize issues faster, your &lt;strong&gt;intuition&lt;/strong&gt; is more effective; and most importantly, what you know you don&amp;rsquo;t know usually leads to more fruitful investigations. If you can find a way to know the most about your product by a better means than exploratory testing then, by all means, do it. And then tell me about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying your first .NET app on Cloud Foundry</title>
      <link>/post/dotnet-quick-intro/</link>
      <pubDate>Wed, 13 Jan 2016 10:00:00 -0500</pubDate>
      
      <guid>/post/dotnet-quick-intro/</guid>
      <description>

&lt;p&gt;We on the .NET team for Cloud Foundry are pretty excited about our recently released support for .NET applications in CF! As of November 2015, this 1.0 support for Windows applications is available with Pivotal Cloud Foundry (PCF) 1.6, and is completely open source and available within the &lt;a href=&#34;https://www.cloudfoundry.org/&#34;&gt;Cloud Foundry Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, Windows developers will have access to the magic of Cloud Foundry!&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re really excited to bring the magic of Cloud Foundry to Windows developers as well!&lt;/p&gt;

&lt;h2 id=&#34;some-background:fe7b60f02e4226e4a72b87835d8bd54b&#34;&gt;Some Background&lt;/h2&gt;

&lt;p&gt;Cloud Foundry is a great platform for deploying your web applications. Once you&amp;rsquo;ve set it up, the experience as a developer is as easy as &lt;code&gt;cf push&lt;/code&gt; to push your app live to the platform.&lt;/p&gt;

&lt;p&gt;You may have heard about the recent &lt;a href=&#34;https://docs.cloudfoundry.org/concepts/diego/diego-architecture.html&#34;&gt;&lt;em&gt;Diego&lt;/em&gt;&lt;/a&gt; effort within CF. If not, Onsi has a great primer &lt;a href=&#34;https://blog.pivotal.io/pivotal-cloud-foundry/features/cf-summit-video-diego-reimagines-the-cloud-foundry-elastic-runtime&#34;&gt;here&lt;/a&gt;. At a high level though, Diego is the new &lt;em&gt;runtime&lt;/em&gt; for CF.&lt;/p&gt;

&lt;p&gt;In order to get .NET applications to run on a Windows Server, we needed to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diego support for Windows&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Garden container support for Windows*&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;PS. This is where we got the name of the project. Garden + Windows = Greenhouse!&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over the past several months, we&amp;rsquo;ve spent a lot of time implementing both of these on top of Windows 2012 R2, and we now &lt;em&gt;fully support&lt;/em&gt; Diego on Windows! You can see all of our code on Github in &lt;a href=&#34;https://github.com/cloudfoundry-incubator/diego-windows-release&#34;&gt;Diego Windows&lt;/a&gt; and &lt;a href=&#34;https://github.com/cloudfoundry-incubator/garden-windows&#34;&gt;Garden Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;re all set with the background, lets actually deploy an app!&lt;/p&gt;

&lt;h2 id=&#34;prerequisites-for-deploying-windows-apps:fe7b60f02e4226e4a72b87835d8bd54b&#34;&gt;Prerequisites for Deploying Windows Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An existing Cloud Foundry installation with Elastic Runtime/Diego support. If you don&amp;rsquo;t have one yet, first check out &lt;a href=&#34;http://pivotal.io/platform&#34;&gt;Pivotal Cloud Foundry&lt;/a&gt; or the &lt;a href=&#34;http://docs.cloudfoundry.org/deploying/&#34;&gt;Cloud Foundry Open Source project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;At least one Windows cell in your CF deployment using the latest compatible Diego Windows and Garden Windows MSIs. More information can be found in the &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/opsguide/deploying-diego.html&#34;&gt;PCF docs&lt;/a&gt; or the &lt;a href=&#34;https://github.com/cloudfoundry-incubator/diego-windows-release/blob/master/docs/INSTALL.md&#34;&gt;Diego Windows Install Instructions&lt;/a&gt; on Github&lt;/li&gt;
&lt;li&gt;On your development machine (&lt;em&gt;Windows machine not required if you&amp;rsquo;re using our pre-built sample app&lt;/em&gt;):

&lt;ul&gt;
&lt;li&gt;Git. For Windows, we like &lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;git for windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The latest &lt;a href=&#34;https://github.com/cloudfoundry/cli&#34;&gt;Cloud Foundry CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;deploying-your-first-app:fe7b60f02e4226e4a72b87835d8bd54b&#34;&gt;Deploying your first app&lt;/h2&gt;

&lt;p&gt;With that out of the way, now lets get to deploying. We&amp;rsquo;ll start with a simple sample app that you can just push. You can follow these instructions on either a Linux or a Windows client machine.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First clone our basic sample app to a new directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/cloudfoundry-incubator/NET-sample-app.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also download the source from the &lt;a href=&#34;https://github.com/cloudfoundry-incubator/.NET-sample-app&#34;&gt;GitHub page&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If &lt;em&gt;Diego is enabled by default&lt;/em&gt; on your CF deployment, you can just push your app and wait for it to start:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf push my-app -s windows2012R2 -b binary_buildpack -p ./my-app/ViewEnvironment/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is telling CF to push your app with the name &lt;code&gt;my-app&lt;/code&gt;, using the &lt;strong&gt;stack&lt;/strong&gt; &lt;code&gt;windows2012R2&lt;/code&gt;, with the &lt;strong&gt;buildpack&lt;/strong&gt; &lt;code&gt;binary_buildpack&lt;/code&gt; from the &lt;strong&gt;path&lt;/strong&gt; of &lt;code&gt;./my-app/ViewEnvironment/&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If it&amp;rsquo;s not, or if you&amp;rsquo;re not sure, you&amp;rsquo;ll need to install the &lt;a href=&#34;https://github.com/cloudfoundry-incubator/diego-enabler&#34;&gt;Diego Enabler&lt;/a&gt; CLI plugin and then enable Diego onn the application before starting it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf add-plugin-repo CF-Community http://plugins.cloudfoundry.org/
$ cf install-plugin Diego-Enabler -r CF-Community
$ cf push my-app -s windows2012R2 -b binary_buildpack -p --no-start ./my-app/ViewEnvironment/
$ cf enable-diego my-app
$ cf start my-app
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once your app is pushed, you can navigate to the app&amp;rsquo;s URL and you will see all the VCAP variables.  Add &lt;code&gt;?all=&lt;/code&gt; to the URL to see all the system variables too.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;some-notes:fe7b60f02e4226e4a72b87835d8bd54b&#34;&gt;Some Notes:&lt;/h3&gt;

&lt;p&gt;For Windows applications, we rely on the &lt;em&gt;binary_buildpack&lt;/em&gt; to push pre-compiled applications. If you want to push your own app, make sure to build it locally and push those compiled binaries, as opposed to the uncompiled source files like you might do on a Linux host.&lt;/p&gt;

&lt;p&gt;If you have any errors, check your application logs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf logs my-app --recent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, once you&amp;rsquo;ve built an application in Visual Studio, you&amp;rsquo;ll want to publish the application in VS (see &lt;a href=&#34;https://msdn.microsoft.com/library/1y1404zt(v=vs.100&#34;&gt;MSDN instructions&lt;/a&gt;.aspx)) and then push the folder that you&amp;rsquo;ve published to, and not the root folder for your app.&lt;/p&gt;

&lt;h2 id=&#34;next-steps:fe7b60f02e4226e4a72b87835d8bd54b&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Cloud Foundry simplifies the process of deploying .NET apps. Try it with your own apps! Check your logs and report any issues to us on &lt;a href=&#34;https://github.com/cloudfoundry-incubator/diego-windows-release&#34;&gt;GitHub&lt;/a&gt;, or on the &lt;strong&gt;#Greenhouse&lt;/strong&gt; channel on the open &lt;a href=&#34;http://slack.cloudfoundry.org/&#34;&gt;Cloud Foundry Slack&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>